{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseAPI = \"https://localhost:44389/api/Authentication\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  login(userName, password) {\n    return this.http.post(this.baseAPI + '/login', JSON.stringify({\n      userName: userName,\n      password: password\n    }), this.httpOptions).pipe(catchError(this.handleError));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,EAAqBC,UAAU,QAAQ,MAAM;;;AAMhE,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAU,4CAA4C;IAI7D,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAE;QAAE,cAAc,EAAE;MAAkB,CAAE;KACjE;EAJuC;EAOxCO,KAAK,CAAEC,QAAgB,EAAEC,QAAgB;IAItC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CACpB,IAAI,CAACC,OAAO,GAAG,QAAQ,EACvBC,IAAI,CAACC,SAAS,CAAE;MAACL,QAAQ,EAACA,QAAQ;MAAEC,QAAQ,EAACA;IAAQ,CAAC,CAAE,EACxD,IAAI,CAACK,WAAW,CAChB,CACAC,IAAI,CAAEd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAAE;EACtC;EAEF;EACAA,WAAW,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,MAAM,CAACC,KAAK,CAACL,YAAY,CAAC;IAC1B,OAAOhB,UAAU,CAAC,MAAK;MACrB,OAAOgB,YAAY;IACrB,CAAC,CAAC;EACJ;;AArCWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["HttpHeaders","catchError","throwError","AuthService","constructor","http","headers","login","userName","password","post","baseAPI","JSON","stringify","httpOptions","pipe","handleError","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\Learning\\Learning\\Angular+12\\employee-management\\src\\app\\_services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, retry, throwError } from 'rxjs';\nimport { User } from '../shared/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  baseAPI:string = \"https://localhost:44389/api/Authentication\";\n\n  constructor(private http: HttpClient) { }\n\n  httpOptions = {\n    headers: new HttpHeaders( { 'Content-Type': 'application/json' } )\n  };\n\n\n  login( userName: string, password: string ): Observable<any> {\n\n\n\n     return this.http.post(\n      this.baseAPI + '/login',\n      JSON.stringify( {userName:userName, password:password} ),\n      this.httpOptions\n     )\n     .pipe( catchError(this.handleError) );\n    }\n\n  // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}