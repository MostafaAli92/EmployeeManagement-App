{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/storage.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(storageService, router) {\n    this.storageService = storageService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.checkAuth();\n  }\n  checkAuth() {\n    if (this.storageService.isLoggedIn()) {\n      return true;\n    } else {\n      // Redirect to the login page if the user is not authenticated\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,mBAAc,GAAdD,cAAc;IAA0B,WAAM,GAANC,MAAM;EAAW;EAC7EC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,OAAO,IAAI,CAACC,SAAS,EAAE;EAE3B;EAEQA,SAAS;IACf,IAAI,IAAI,CAACL,cAAc,CAACM,UAAU,EAAE,EAAE;MACpC,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;AAlBWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","storageService","router","canActivate","route","state","checkAuth","isLoggedIn","navigate","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\Learning\\Learning\\Angular+12\\employee-management\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { StorageService } from '../_services/storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private storageService: StorageService, private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n      return this.checkAuth();\n\n  }\n\n  private checkAuth(): boolean {\n    if (this.storageService.isLoggedIn()) {\n      return true;\n    } else {\n      // Redirect to the login page if the user is not authenticated\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}