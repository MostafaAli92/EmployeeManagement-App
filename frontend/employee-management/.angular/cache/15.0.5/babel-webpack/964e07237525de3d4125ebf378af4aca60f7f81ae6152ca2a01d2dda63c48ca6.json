{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationInfoService {\n  constructor(http) {\n    this.http = http;\n    this.baseAPI = \"https://localhost:44389/api\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  login(userNAme, password) {\n    var userInfo = {\n      userName: userNAme,\n      password: password,\n      fullName: '',\n      email: '',\n      userRole: ''\n    };\n    return this.http.post(this.baseAPI + '/Login', JSON.stringify(userInfo), this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nAuthenticationInfoService.ɵfac = function AuthenticationInfoService_Factory(t) {\n  return new (t || AuthenticationInfoService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationInfoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationInfoService,\n  factory: AuthenticationInfoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAuCA,WAAW,QAAQ,sBAAsB;AAEhF,SAASC,UAAU,EAAcC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAOhE,OAAM,MAAOC,yBAAyB;EAIpCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAU,6BAA6B;IAI9C,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EANuC;EASxCQ,KAAK,CAAEC,QAAgB,EAAEC,QAAgB;IACtC,IAAIC,QAAQ,GAAS;MACnBC,QAAQ,EAAEH,QAAQ;MAClBC,QAAQ,EAAEA,QAAQ;MAClBG,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;IAED,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CACpB,IAAI,CAACC,OAAO,GAAG,QAAQ,EACvBC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,EACxB,IAAI,CAACS,WAAW,CAChB,CACAC,IAAI,CAACnB,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACqB,WAAW,CAAC,CAAE;EAC/C;EAGG;EACLA,WAAW,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,MAAM,CAACC,KAAK,CAACL,YAAY,CAAC;IAC1B,OAAOrB,UAAU,CAAC,MAAK;MACrB,OAAOqB,YAAY;IACrB,CAAC,CAAC;EACJ;;AA7CWpB,yBAAyB;mBAAzBA,yBAAyB;AAAA;AAAzBA,yBAAyB;SAAzBA,yBAAyB;EAAA0B,SAAzB1B,yBAAyB;EAAA2B,YAFxB;AAAM","names":["HttpHeaders","catchError","retry","throwError","AuthenticationInfoService","constructor","http","headers","login","userNAme","password","userInfo","userName","fullName","email","userRole","post","baseAPI","JSON","stringify","httpOptions","pipe","handleError","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\Learning\\Angular+12\\employee-management\\src\\app\\services\\authentication-info.service.ts"],"sourcesContent":["import { HttpClient, HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, retry, throwError } from 'rxjs';\nimport { tokenInfo } from '../shared/token-info';\nimport { user } from '../shared/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationInfoService {\n\n  baseAPI:string = \"https://localhost:44389/api\";\n\n  constructor(private http: HttpClient) { }\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n\n  login( userNAme: string, password: string ): Observable<any> { \n     var userInfo: user = {\n       userName: userNAme, \n       password: password,\n       fullName: '',\n       email: '',\n       userRole: ''\n     };\n     \n     return this.http.post(\n      this.baseAPI + '/Login',\n      JSON.stringify(userInfo),\n      this.httpOptions\n     )\n     .pipe(retry(1), catchError(this.handleError) );    \n    }\n\n\n       // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}